{"version":3,"file":"router-js-sdk.cjs.development.js","sources":["../src/constants/network/index.ts","../src/types/index.ts","../src/constants/tokens/index.ts","../src/constants/index.ts","../src/utils/index.ts","../src/functions/getSwapQuote.ts","../src/functions/getApproval.ts","../src/functions/getFee.ts","../src/functions/getTxStatus.ts","../src/router-protocol/index.ts"],"sourcesContent":["import networks from './network.mainnet.json'\n\nexport interface NetworkType {\n    name: string;\n    type: string;\n    networkId: string;\n    id: string;\n    endpoint: string;\n    socket: string;\n    from: string;\n    stakingRewardsFactory: string;\n    native: string;\n    wnative: string;\n    rewardsToken: string;\n    feeHandler: string;\n    http: string;\n    bridge: string;\n    erc20Handler: string;\n    reserveHandler: string;\n    oneSplit: string;\n    genericHandler: string;\n    gasLimit: string;\n    maxGasPrice: string;\n}\n\nconst config_generator = () => {\n    let network_config: { [chainId: string]: NetworkType } = {}\n    networks.forEach(network => {\n        network_config = { ...network_config, [network.networkId]: network }\n        return\n    })\n    return network_config\n}\n\nexport const NETWORK_CONFIG: { [chainId: string]: NetworkType } = config_generator()","export enum ChainId {\n    MAINNET = \"1\",\n    ROPSTEN = \"3\",\n    RINKEBY = \"4\",\n    GÃ–RLI = \"5\",\n    KOVAN = \"42\",\n    POLYGON = \"137\",\n    MUMBAI = \"80001\",\n    OKEX = \"66\",\n    ARBITRUM = \"42161\",\n    FANTOM = \"250\",\n    OPTIMISM = \"10\",\n    XDAI = \"100\",\n    BSC = \"56\",\n    HARMONY = \"1666600000\",\n    AVALANCHE = \"43114\",\n    FUJI = \"43113\"\n}\nexport interface AssetType {\n    name: string;\n    symbol: string;\n    decimals: string;\n    address: string;\n    chainId: string;\n    logoURI: string;\n    lpSymbol: string;\n    lpAddress: string;\n    stakingRewards: string;\n    resourceId: string;\n    lpResourceId: string;\n    mappedOnBridge: boolean;\n    native: boolean;\n    hasLpToken: boolean;\n    isLpToken: boolean;\n    stableAsset: boolean;\n    mining: boolean;\n    activeMining: boolean;\n    enableLiquidityMining: boolean;\n  }\nexport interface TransactionStatus{\"tx_status\":string,\n\"tx_status_code\":number,\n\"src_chain_id\":string,\n\"dest_chain_id\":string,\n\"src_tx_hash\":string,\n\"dest_tx_hash\":string}\nexport * from \"./quote\"","import ropstenAsset from './ropstenTestnet.ethereum.json'\nimport kovanAsset from './kovanTestnet.ethereum.json'\nimport maticAsset from './maticTestnet.ethereum.json'\nimport bscAsset from './bsc.mainnet.json'\nimport avaxFujiAsset from './avax.testnet.json'\nimport avaxAsset from './avax.mainnet.json'\nimport okexAsset from './okex.testnet.json'\nimport ethereumAsset from './ethereum.mainnet.json'\nimport polgonAsset from './polygon.mainnet.json'\nimport ftmAsset from './ftm.mainnet.json'\nimport arbitrumAsset from './arbitrum.mainnet.json'\nimport optimismAsset from './optimism.mainnet.json'\nimport { AssetType, ChainId } from '../../types'\n\n export const ASSET_LIST:{[chainId:string]:AssetType[]} = {\n    [ChainId.KOVAN]: kovanAsset,\n    [ChainId.MUMBAI]: maticAsset,\n    [ChainId.BSC]: bscAsset,\n    [ChainId.AVALANCHE]: avaxAsset,\n    [ChainId.FUJI]: avaxFujiAsset,\n    [ChainId.MAINNET]: ethereumAsset,\n    [ChainId.POLYGON]: polgonAsset,\n    [ChainId.FANTOM]: ftmAsset,\n    [ChainId.ARBITRUM]: arbitrumAsset,\n    [ChainId.OPTIMISM]: optimismAsset,\n    [ChainId.ROPSTEN]: ropstenAsset,\n    [ChainId.OKEX]: okexAsset,\n  }","\nexport * from './network'\nexport * from './tokens'\n\nexport const ROUTER_STATS_HOST=\"https://api.stats.routerprotocol.com\"\nexport const NETWORK_CONFIG_URL=\"https://raw.githubusercontent.com/router-protocol/sdk-network-config/main/networkConfig/mainnet.json\"","import { AssetType, NETWORK_CONFIG } from \"..\"\n\nexport const isNative=(asset:AssetType)=>{\n    return !!asset.native\n}\nexport const isAddressNative=(address:string,chainId:string)=>{\n    return NETWORK_CONFIG[chainId].native===address ;\n}\nexport const isReserveAsset=(asset:AssetType)=>{\n    return !(asset.resourceId===\"\")\n}","import axios from 'axios'\nimport { isAddressNative } from '../utils'\nimport { NetworkType } from '..'\n// const PATH_FINDER_ENDPOINT = 'https://api.pathfinder.routerprotocol.com/api/getRouteForMultiSwap'\nconst PATH_FINDER_API_URL = \"https://api.pathfinder.routerprotocol.com/api\"\n\n\n// calling the pathfinder api using axios\nconst fetchPathfinderData = async (params: any) => {\n    const endpoint = \"quote\"\n    const pathUrl = `${PATH_FINDER_API_URL}/${endpoint}`\n    try {\n        const res = await axios.get(pathUrl, { params })\n        return res.data\n    } catch (e) {\n        console.error(`Fetching data from pathfinder: ${e}`)\n    }\n}\nconst getSwapQuote = async ({ \n     expandedAmount,\n     sourceNetworkId,\n     destinationNetworkId,\n     sourceTokenAddress,\n     destinationTokenAddress,\n    userAddress,\n    feeTokenAddress,\n    slippageTolerance,\n    network_config,\n    widgetId }:\n    { \n         expandedAmount: string,\n         sourceNetworkId: string,\n         destinationNetworkId: string,\n         sourceTokenAddress: string,\n         destinationTokenAddress: string,\n         userAddress:string,\n        feeTokenAddress:string,\n        widgetId:string,\n        slippageTolerance:number,\n        network_config:{ [chainId: string]: NetworkType }\n    }\n) => {\n    let args;\n    if(sourceNetworkId===destinationNetworkId){\n        args={\n            'fromTokenAddress': sourceTokenAddress, // USDC on Polygon\n            'toTokenAddress': destinationTokenAddress, // USDC on Fantom\n            'amount': expandedAmount, // 10 USDC (USDC token contract on Polygon has 6 decimal places)\n            'fromTokenChainId': sourceNetworkId, // Polygon\n            'toTokenChainId': destinationNetworkId, // Fantom\n            'userAddress': userAddress,\n            'feeTokenAddress': feeTokenAddress, // ROUTE on Polygon\n            'slippageTolerance': slippageTolerance,\n            widgetId\n        }\n        // pathUrl = `${PATH_FINDER_ENDPOINT}?fromTokenAddress=${sourceTokenAddress}&toTokenAddress=${destinationTokenAddress}&amount=${expandedAmount}&fromTokenChainId=${sourceNetworkId}&toTokenChainId=${destinationNetworkId}`\n    } else {\n        if(isAddressNative(sourceTokenAddress,sourceNetworkId)||isAddressNative(destinationTokenAddress,destinationNetworkId)){\n            // pathUrl = `${PATH_FINDER_ENDPOINT}?fromTokenAddress=${network_config[sourceNetworkId].wnative}&toTokenAddress=${destinationTokenAddress}&amount=${expandedAmount}&fromTokenChainId=${sourceNetworkId}&toTokenChainId=${destinationNetworkId}`\n            args={\n                'fromTokenAddress': network_config[sourceNetworkId].wnative, // USDC on Polygon\n                'toTokenAddress': network_config[destinationNetworkId].wnative, // USDC on Fantom\n                'amount': expandedAmount, // 10 USDC (USDC token contract on Polygon has 6 decimal places)\n                'fromTokenChainId': sourceNetworkId, // Polygon\n                'toTokenChainId': destinationNetworkId, // Fantom\n                'userAddress': userAddress,\n                'feeTokenAddress': feeTokenAddress, // ROUTE on Polygon\n                'slippageTolerance': slippageTolerance,\n                widgetId\n            }\n        }else if(isAddressNative(sourceTokenAddress,sourceNetworkId)){\n            // pathUrl = `${PATH_FINDER_ENDPOINT}?fromTokenAddress=${network_config[sourceNetworkId].wnative}&toTokenAddress=${destinationTokenAddress}&amount=${expandedAmount}&fromTokenChainId=${sourceNetworkId}&toTokenChainId=${destinationNetworkId}`\n            args={\n                'fromTokenAddress': network_config[sourceNetworkId].wnative, // USDC on Polygon\n                'toTokenAddress': destinationTokenAddress, // USDC on Fantom\n                'amount': expandedAmount, // 10 USDC (USDC token contract on Polygon has 6 decimal places)\n                'fromTokenChainId': sourceNetworkId, // Polygon\n                'toTokenChainId': destinationNetworkId, // Fantom\n                'userAddress': userAddress,\n                'feeTokenAddress': feeTokenAddress, // ROUTE on Polygon\n                'slippageTolerance': slippageTolerance,\n                widgetId\n            }\n        }else if(isAddressNative(destinationTokenAddress,destinationNetworkId)){\n            // pathUrl = `${PATH_FINDER_ENDPOINT}?fromTokenAddress=${sourceTokenAddress}&toTokenAddress=${network_config[destinationNetworkId].wnative}&amount=${expandedAmount}&fromTokenChainId=${sourceNetworkId}&toTokenChainId=${destinationNetworkId}`\n            args={\n                'fromTokenAddress': sourceTokenAddress, // USDC on Polygon\n                'toTokenAddress': network_config[destinationNetworkId].wnative, // USDC on Fantom\n                'amount': expandedAmount, // 10 USDC (USDC token contract on Polygon has 6 decimal places)\n                'fromTokenChainId': sourceNetworkId, // Polygon\n                'toTokenChainId': destinationNetworkId, // Fantom\n                'userAddress': userAddress,\n                'feeTokenAddress': feeTokenAddress, // ROUTE on Polygon\n                'slippageTolerance': slippageTolerance,\n                widgetId\n            }\n        } else{\n            // pathUrl = `${PATH_FINDER_ENDPOINT}?fromTokenAddress=${sourceTokenAddress}&toTokenAddress=${destinationTokenAddress}&amount=${expandedAmount}&fromTokenChainId=${sourceNetworkId}&toTokenChainId=${destinationNetworkId}`\n            args={\n                'fromTokenAddress': sourceTokenAddress, // USDC on Polygon\n                'toTokenAddress': destinationTokenAddress, // USDC on Fantom\n                'amount': expandedAmount, // 10 USDC (USDC token contract on Polygon has 6 decimal places)\n                'fromTokenChainId': sourceNetworkId, // Polygon\n                'toTokenChainId': destinationNetworkId, // Fantom\n                'userAddress': userAddress,\n                'feeTokenAddress': feeTokenAddress, // ROUTE on Polygon\n                'slippageTolerance': slippageTolerance,\n                widgetId\n            }\n        }\n    }\n\n    try {\n        if(args){\n            const pathfinder_response = await fetchPathfinderData(args)\n            return pathfinder_response;\n        }\n    } catch (e) {\n        return e\n    }\n}\n\nexport default getSwapQuote","import { Interface } from \"@ethersproject/abi\";\nimport {  Provider as ProviderType } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { NetworkType } from \"..\";\nimport erc20Token from \"../abis/ERC20.json\"\n\n\nexport const getSourceTokenApproval = async ({\n    tokenAddress,\n    sourceNetworkId,\n    destinationNetworkId,\n    userAddress,\n    provider,\n    network_config\n    // spenderAddress, // Cross chain reserve handler / same chain one-split\n}: {\n    tokenAddress: string,\n    sourceNetworkId: string,\n    destinationNetworkId: string,\n    userAddress: string,\n    provider:ProviderType,\n    network_config:{ [chainId: string]: NetworkType }\n    // spenderAddress: string\n}) => {\n    try {\n        let spenderAddress;\n        if(sourceNetworkId===destinationNetworkId){\n            spenderAddress=network_config[sourceNetworkId].oneSplit;\n        } else {\n            spenderAddress=network_config[sourceNetworkId].reserveHandler;\n        }\n\n        const erc20Instance = new ethers.Contract(\n            tokenAddress,\n            erc20Token,\n            provider\n        );\n        const result = await erc20Instance.allowance(\n            userAddress,\n            spenderAddress\n        );\n        return result;\n    } catch (error) {\n        console.log(\"Error\", error);\n    }\n}\n\nexport const getFeeTokenApproval = async ({\n    tokenAddress,\n    networkId,\n    userAddress,\n    provider,\n    network_config\n}: {\n    tokenAddress: string,\n    networkId: string\n    userAddress: string,\n    provider: ProviderType,\n    network_config:{ [chainId: string]: NetworkType }\n}) => {\n    try {\n        const spenderAddress=network_config[networkId].reserveHandler;\n        const erc20Instance = new ethers.Contract(\n            tokenAddress,\n            erc20Token,\n            provider\n        );\n        const result = await erc20Instance.allowance(\n            userAddress,\n            spenderAddress\n        );\n        return result;\n    } catch (error) {\n        console.log(\"Error\", error);\n    }\n}\n\nexport const setSourceTokenApproval = async ({\n    tokenAddress,\n    userAddress,\n    amount,\n    sourceNetworkId,\n    destinationNetworkId,\n    network_config\n}: {\n    tokenAddress: string\n    userAddress: string\n    amount: string\n    sourceNetworkId: string,\n    destinationNetworkId: string,\n    network_config:{ [chainId: string]: NetworkType }\n}) => {\n    let spenderAddress;\n        if(sourceNetworkId===destinationNetworkId){\n            spenderAddress=network_config[sourceNetworkId].oneSplit;\n        } else {\n            spenderAddress=network_config[sourceNetworkId].reserveHandler;\n        }\n    try {\n        const iface = new Interface(erc20Token);\n        const rawData= iface.encodeFunctionData(\"approve\",[\n            spenderAddress,\n            amount\n        ])\n        return {\n           to:tokenAddress,\n           from:userAddress,\n           data:rawData,\n        };\n    } catch (error) {\n        console.log(\"Error\", error);\n        return undefined\n    }\n}\n\nexport const setFeeTokenApproval = async ({\n    amount,\n    tokenAddress,\n    userAddress,\n    sourceNetworkId,\n    network_config\n}: {\n    amount: string,\n    tokenAddress: string\n    userAddress: string\n    sourceNetworkId: string,\n    network_config:{ [chainId: string]: NetworkType }\n}) => {\n    const spenderAddress=network_config[sourceNetworkId].reserveHandler;\n    try {\n        const iface = new Interface(erc20Token);\n        const rawData= iface.encodeFunctionData(\"approve\",[\n            spenderAddress,\n            amount\n        ])\n        return {\n            to:tokenAddress,\n            from:userAddress,\n            data:rawData,\n         };\n        \n        } catch (error) {\n        console.log(\"Error\", error);\n        return undefined\n    }\n}","import { Provider as ProviderType } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\nimport { Contract, Provider } from \"ethers-multicall\";\nimport feeHandlerabi from \"../abis/Fee-Manager.json\"\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { NetworkType } from \"..\";\n\nconst getFeeFromFeeHandlerMulticaller = ({ feeHandlerAddress, dstChainID, feeTokenAddress }: {\n  feeHandlerAddress: string, dstChainID: string, feeTokenAddress: string\n}) => {\n\n  const feeHandlerInstance = new Contract(\n    feeHandlerAddress,  \n    feeHandlerabi\n  );\n\n  return feeHandlerInstance.getFeeSafe(dstChainID, feeTokenAddress);\n\n};\n\nconst getFeeTokens = async ({ feeHandlerAddress,\n  provider,\n  dstChainID }: { feeHandlerAddress: string; provider: ProviderType; dstChainID: string }) => {\n  const feeHandlerInstance = new ethers.Contract(\n    feeHandlerAddress,\n    feeHandlerabi,\n    provider\n  );\n\n  try {\n    const tokens = await feeHandlerInstance.getChainFeeTokens(dstChainID);\n    return tokens;\n  } catch (e) {\n    console.log(\"Fee handler error - \", e);\n  }\n};\n//return (fees._transferFee, fees._exchangeFee, fees.accepted);\nexport const getFeeAmount = async ({  sourceProvider, sourceNetworkId,destNetworkId,network_config }: { sourceProvider: ProviderType, sourceNetworkId: string,destNetworkId: string,network_config:{ [chainId: string]: NetworkType }\n}) => {\n  const ethcallProvider = new Provider(sourceProvider, Number(sourceNetworkId))\n  const sourceFeeHandlerAddress=network_config[sourceNetworkId].feeHandler;\n  const destChainId=network_config[destNetworkId].id;\n\n\n  const feeTokenList = await getFeeTokens({\n    feeHandlerAddress: sourceFeeHandlerAddress,\n    provider: sourceProvider,\n    dstChainID: destChainId\n  })\n\n  const contractCalls = feeTokenList.map((feeTokenAddress: string) => getFeeFromFeeHandlerMulticaller({\n    feeHandlerAddress: sourceFeeHandlerAddress,\n    dstChainID: destChainId,\n    feeTokenAddress: feeTokenAddress\n  }))\n\n  const feeArray = await ethcallProvider.all(contractCalls)\n\n  const newFeeTokenList: {\n    address: string;\n    transferFee: BigNumber;\n    exchangeFee: BigNumber;\n  }[] = []\n\n  feeTokenList.forEach((feeTokenAddress: string, index: number) => {\n    if (feeArray[index][2]) {\n      const feeObject = {\n        address: feeTokenAddress,\n        transferFee: feeArray[index][0],\n        exchangeFee: feeArray[index][1],\n      }\n      newFeeTokenList.push(feeObject)\n    }\n  })\n\n  return newFeeTokenList\n} ","import axios from \"axios\"\nimport { ROUTER_STATS_HOST, TransactionStatus } from \"..\"\n\nexport const getTxStatus = async (txHash:string,networkId:string\n    ):Promise<TransactionStatus|undefined>=>{\n    const params={\n        txHash,\n        networkId\n    }\n    const pathUrl = `${ROUTER_STATS_HOST}/api/status`\n    try {\n        const res= await axios.get(pathUrl, { params })\n        return res.data\n    } catch (e) {\n        console.error(`Fetching Transaction Status: ${e}`)\n        return undefined\n    }\n}","import { Signer } from \"@ethersproject/abstract-signer\";\nimport {  Provider as ProviderType, TransactionResponse } from \"@ethersproject/providers\";\nimport getSwapQuote from \"../functions/getSwapQuote\";\nimport { NetworkType, NETWORK_CONFIG_URL, Quote } from \"../index\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { getFeeTokenApproval, getSourceTokenApproval, setFeeTokenApproval, setSourceTokenApproval } from \"../functions/getApproval\";\nimport { getFeeAmount } from \"../functions/getFee\";\nimport { getTxStatus } from \"../functions/getTxStatus\";\n\nexport class RouterProtocol {\n  public readonly apiKey: string\n  public readonly sourceNetworkId: string\n  public readonly provider: ProviderType\n  private networkConfig: ({ [chainId: string]: NetworkType }|undefined);\n\n  constructor (apiKey:string,sourceNetworkId:string,provider:ProviderType) {\n      this.apiKey = apiKey;\n      this.provider = provider;\n      this.sourceNetworkId = sourceNetworkId;\n  }\n\n  public async initialize(){\n    try{\n     const networks:NetworkType[]=await axios.get(NETWORK_CONFIG_URL).then((res)=>{\n       return res.data\n     })\n     let network_config: { [chainId: string]: NetworkType } = {}\n    networks.forEach(network => {\n        network_config = { ...network_config, [network.networkId]: network }\n        return\n    })\n     this.networkConfig=network_config;\n    } catch(err){\n      throw err\n    }\n  }\n  // to-be deprecated\n  public async initailize(){\n    try{\n     const networks:NetworkType[]=await axios.get(NETWORK_CONFIG_URL).then((res)=>{\n       return res.data\n     })\n     let network_config: { [chainId: string]: NetworkType } = {}\n    networks.forEach(network => {\n        network_config = { ...network_config, [network.networkId]: network }\n        return\n    })\n     this.networkConfig=network_config;\n    } catch(err){\n      throw err\n    }\n  }\n  /**\n   * gets quote\n   */\n\n  public async getQuote(\n    amount:string,\n    destinationNetworkId:string,\n    sourceTokenAddress:string,\n    destinationTokenAddress:string,\n    userAddress:string,\n    feeTokenAddress:string,\n    slippageTolerance:number\n    ):Promise<Quote>{\n      try {\n        if(!this.networkConfig)\n        throw \"Not initialized!\"\n        const res=await getSwapQuote({\n          expandedAmount:amount,\n          sourceNetworkId:this.sourceNetworkId,\n          destinationNetworkId,\n          sourceTokenAddress,\n          destinationTokenAddress,\n          userAddress,\n          feeTokenAddress,\n          slippageTolerance,\n          network_config:this.networkConfig,\n          widgetId:this.apiKey\n        })\n      return res\n    } catch(err){\n      throw err;\n    }\n  }\n  /**\n   * swaps\n   */\n  public async swap(quote:Quote,signer:Signer,txGasLimit?:string) {\ntry{\n  if(!this.networkConfig)\n  throw \"Not initialized!\"\n  if(!quote)\n  throw \"No Quote\"\n    // setting the gas price and limit\n    const gasPrice = await this.provider.getGasPrice()\n    \n    const gasLimit = ethers.utils.hexlify(Number(txGasLimit?txGasLimit:1000000))\n\n    const transaction:TransactionResponse=await signer.sendTransaction({...quote.txn.execution,gasPrice,gasLimit});\n    await transaction.wait()\n    return transaction;}\n    catch(err){\n      throw err;\n    }\n  }\n  public async getSourceTokenAllowance(tokenAddress: string,\n    destinationNetworkId: string,\n    userAddress: string,\n    ){\n    try{\n      if(!this.networkConfig)\n      throw \"Not initialized!\"\n      return await getSourceTokenApproval({\n      tokenAddress,\n      sourceNetworkId:this.sourceNetworkId,\n      provider:this.provider,\n      destinationNetworkId,\n      userAddress,\n      network_config:this.networkConfig\n    })}catch(err){\n      throw err;\n    }\n    }\n  public async getFeeTokenAllowance(tokenAddress: string,\n    destinationNetworkId: string,\n    userAddress: string,\n    ){\n    try{\n      if(!this.networkConfig)\n      throw \"Not initialized!\"\n      return await getFeeTokenApproval({\n      tokenAddress,\n      networkId:destinationNetworkId,\n      provider:this.provider,\n      userAddress,\n            network_config:this.networkConfig\n\n    })}catch(err){\n      throw err;\n    }\n    }\n\n  public async approveSourceToken(tokenAddress: string,\n    userAddress: string,\n    amount: string,\n    destinationNetworkId: string,\n    signer:Signer,\n    txGasLimit?:number){\n    try{\n      if(!this.networkConfig)\n      throw \"Not initialized!\"\n      const transactionReq= await setSourceTokenApproval({\n      tokenAddress,\n      amount,\n      destinationNetworkId,\n      userAddress,\n      sourceNetworkId:this.sourceNetworkId,\n            network_config:this.networkConfig\n\n    })\n    // setting the gas price and limit\n    const gasPrice = await this.provider.getGasPrice()\n\n    const gasLimit = ethers.utils.hexlify(Number(txGasLimit?txGasLimit:1000000))\n    const transaction:TransactionResponse=await signer.sendTransaction({...transactionReq,gasPrice,gasLimit});\n    await transaction.wait()\n    return transaction;}catch(err){\n      throw err;\n    }\n  }\n  public async approveFeeToken(tokenAddress: string,\n    userAddress: string,\n    amount: string,signer:Signer,\n    txGasLimit?:number){\n  try {\n    if(!this.networkConfig)\n    throw \"Not initialized!\"\n    const transactionReq= await setFeeTokenApproval({\n     tokenAddress,\n     amount,\n     userAddress,\n     sourceNetworkId:this.sourceNetworkId,\n           network_config:this.networkConfig\n\n   })\n   // setting the gas price and limit\n   const gasPrice = await this.provider.getGasPrice()\n\n   const gasLimit = ethers.utils.hexlify(Number(txGasLimit?txGasLimit:1000000))\n   const transaction:TransactionResponse=await signer.sendTransaction({...transactionReq,gasPrice,gasLimit});\n   await transaction.wait()\n   return transaction;} catch(err){\n    throw err;\n  }\n  }\n  public async getBridgeFee(\n    destinationNetworkId: string,\n  ){\n    try{\n      if(!this.networkConfig)\n      throw \"Not initialized!\"\n      const fee = await getFeeAmount({\n      sourceNetworkId:this.sourceNetworkId,\n      destNetworkId:destinationNetworkId,\n      sourceProvider:this.provider,\n            network_config:this.networkConfig\n})\n    return fee} catch(err){\n      throw err;\n    }\n  }\n  public async getTransactionStatus(txHash:string){\n    try{\n      if(!this.networkConfig)\n      throw \"Not initialized!\"\n      const res=await getTxStatus(txHash,this.sourceNetworkId)\n    return res} catch(err){\n      throw err;\n    }\n  }\n}\n\n\n// whole test\n// feeTokenName\n// transaction status in midway\n// transaction status endpoint"],"names":["config_generator","network_config","networks","forEach","network","networkId","NETWORK_CONFIG","ChainId","ASSET_LIST","KOVAN","kovanAsset","MUMBAI","maticAsset","BSC","bscAsset","AVALANCHE","avaxAsset","FUJI","avaxFujiAsset","MAINNET","ethereumAsset","POLYGON","polgonAsset","FANTOM","ftmAsset","ARBITRUM","arbitrumAsset","OPTIMISM","optimismAsset","ROPSTEN","ropstenAsset","OKEX","okexAsset","ROUTER_STATS_HOST","NETWORK_CONFIG_URL","isAddressNative","address","chainId","native","PATH_FINDER_API_URL","fetchPathfinderData","params","endpoint","pathUrl","res","axios","get","data","e","console","error","getSwapQuote","expandedAmount","sourceNetworkId","destinationNetworkId","sourceTokenAddress","destinationTokenAddress","userAddress","feeTokenAddress","slippageTolerance","widgetId","args","wnative","pathfinder_response","getSourceTokenApproval","tokenAddress","provider","spenderAddress","oneSplit","reserveHandler","erc20Instance","ethers","Contract","erc20Token","result","allowance","log","getFeeTokenApproval","setSourceTokenApproval","amount","iface","Interface","rawData","encodeFunctionData","to","from","undefined","setFeeTokenApproval","getFeeFromFeeHandlerMulticaller","feeHandlerAddress","dstChainID","feeHandlerInstance","feeHandlerabi","getFeeSafe","getFeeTokens","tokens","getChainFeeTokens","getFeeAmount","sourceProvider","destNetworkId","ethcallProvider","Provider","Number","sourceFeeHandlerAddress","feeHandler","destChainId","id","feeTokenList","contractCalls","map","feeArray","all","newFeeTokenList","index","feeObject","transferFee","exchangeFee","push","getTxStatus","txHash","RouterProtocol","constructor","apiKey","initialize","then","networkConfig","err","initailize","getQuote","swap","quote","signer","txGasLimit","gasPrice","getGasPrice","gasLimit","utils","hexlify","transaction","sendTransaction","txn","execution","wait","getSourceTokenAllowance","getFeeTokenAllowance","approveSourceToken","transactionReq","approveFeeToken","getBridgeFee","fee","getTransactionStatus"],"mappings":"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"}