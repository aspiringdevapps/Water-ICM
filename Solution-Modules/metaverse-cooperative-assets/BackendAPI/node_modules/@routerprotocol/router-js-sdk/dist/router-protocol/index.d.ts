import { Signer } from "@ethersproject/abstract-signer";
import { Provider as ProviderType, TransactionResponse } from "@ethersproject/providers";
import { Quote } from "../index";
import { ethers } from "ethers";
export declare class RouterProtocol {
    readonly apiKey: string;
    readonly sourceNetworkId: string;
    readonly provider: ProviderType;
    private networkConfig;
    constructor(apiKey: string, sourceNetworkId: string, provider: ProviderType);
    initialize(): Promise<void>;
    initailize(): Promise<void>;
    /**
     * gets quote
     */
    getQuote(amount: string, destinationNetworkId: string, sourceTokenAddress: string, destinationTokenAddress: string, userAddress: string, feeTokenAddress: string, slippageTolerance: number): Promise<Quote>;
    /**
     * swaps
     */
    swap(quote: Quote, signer: Signer, txGasLimit?: string): Promise<TransactionResponse>;
    getSourceTokenAllowance(tokenAddress: string, destinationNetworkId: string, userAddress: string): Promise<any>;
    getFeeTokenAllowance(tokenAddress: string, destinationNetworkId: string, userAddress: string): Promise<any>;
    approveSourceToken(tokenAddress: string, userAddress: string, amount: string, destinationNetworkId: string, signer: Signer, txGasLimit?: number): Promise<TransactionResponse>;
    approveFeeToken(tokenAddress: string, userAddress: string, amount: string, signer: Signer, txGasLimit?: number): Promise<TransactionResponse>;
    getBridgeFee(destinationNetworkId: string): Promise<{
        address: string;
        transferFee: ethers.BigNumber;
        exchangeFee: ethers.BigNumber;
    }[]>;
    getTransactionStatus(txHash: string): Promise<import("..").TransactionStatus | undefined>;
}
